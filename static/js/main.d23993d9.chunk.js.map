{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Show","TodoList","React","memo","todos","selectedUserId","setSelectedUserId","useState","visibleTodos","setVisibleTodos","filterByTitle","setFilterByTitle","filterByComplited","setFilterByComplited","useEffect","filter","todo","filtredTodos","title","toLowerCase","includes","All","Active","completed","Completed","className","type","value","onChange","event","target","onClick","sort","Math","random","map","classNames","checked","readOnly","userId","id","BASE_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","currentUser","setCurrentUser","loadUser","userFromServer","name","email","phone","App","setTodos","currentTodos","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d23993d9.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState, useEffect } from 'react';\nimport { Todo } from '../../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  setSelectedUserId: (userId: number) => void,\n};\n\nenum Show {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [filterByTitle, setFilterByTitle] = useState('');\n  const [filterByComplited, setFilterByComplited] = useState('all');\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      const filtredTodos = todo.title.toLowerCase().includes(filterByTitle);\n\n      switch (filterByComplited) {\n        case Show.All:\n          return filtredTodos;\n\n        case Show.Active:\n          return filtredTodos && !todo.completed;\n\n        case Show.Completed:\n          return filtredTodos && todo.completed;\n\n        default:\n          return 0;\n      }\n    }));\n  }, [filterByTitle, todos, filterByComplited]);\n\n  const titleFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFilterByTitle(event.target.value.toLowerCase());\n  };\n\n  const completedFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilterByComplited(event.target.value);\n  };\n\n  const randomize = () => {\n    setVisibleTodos([...visibleTodos].sort(() => Math.random() - 0.5));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__control\">\n        <label>\n          Filter by title:\n          <input\n            className=\"TodoList__input\"\n            type=\"text\"\n            data-cy=\"filterByTitle\"\n            value={filterByTitle}\n            onChange={titleFilter}\n          />\n        </label>\n        <label>\n          Filter by status:\n          <select\n            className=\"TodoList__input\"\n            value={filterByComplited}\n            onChange={completedFilter}\n          >\n            <option value={Show.All}>All</option>\n            <option value={Show.Active}>Active</option>\n            <option value={Show.Completed}>Completed</option>\n          </select>\n        </label>\n\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={randomize}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n        {visibleTodos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed },\n            )}\n          >\n            <label>\n              <input type=\"checkbox\" checked={todo.completed} readOnly />\n              <p>{todo.title}</p>\n            </label>\n\n            {todo.userId && (\n              <button\n                className={classNames('TodoList__user-button', 'button',\n                  {\n                    'TodoList__user-button--selected':\n                    selectedUserId === todo.userId,\n                  })}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => setSelectedUserId(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n","import { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api/';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (id: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${id}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUserId: number,\n  setSelectedUserId: (id: number) => void,\n}\n\nexport const CurrentUser: React.FC<Props> = React.memo(({\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const loadUser = async () => {\n    const userFromServer = await getUser(selectedUserId);\n\n    setCurrentUser(userFromServer);\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, [selectedUserId]);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${selectedUserId}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={() => setSelectedUserId(0)}\n            className=\"CurrentUser__clear button\"\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n});\n","import React, { useEffect, useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const currentTodos = useCallback(async () => {\n    setTodos(await getTodos());\n  }, []);\n\n  useEffect(() => {\n    currentTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          setSelectedUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}